plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.dokka'
    id 'de.marcphilipp.nexus-publish'
    id 'signing'
}

android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        consumerProguardFiles 'proguard.pro'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jvmArgs '-noverify'
            }
        }
    }

    compileOptions {
        sourceCompatibility versions.javaSourceCompatibility
        targetCompatibility versions.javaTargetCompatibility
    }
}

dependencies {
    implementation files('libs/android-magnessdk-5.4.0.jar')

    implementation deps.annotation
    api project(':BraintreeCore')

    testImplementation deps.robolectric
    testImplementation deps.mockitoCore
    testImplementation deps.androidxTestCore
    testImplementation deps.jsonAssert
    testImplementation deps.powermockJunit
    testImplementation deps.powermockRule
    testImplementation deps.powermockMockito
    testImplementation deps.powermockClassloading

    testImplementation project(':TestUtils')

    androidTestImplementation deps.androidxTestRules
    androidTestImplementation deps.androidxTestRunner
    androidTestImplementation deps.junitTest
    androidTestImplementation deps.appCompat
    androidTestImplementation project(':TestUtils')
}

// region signing and publishing

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

signing {
    required {
        !version.endsWith("SNAPSHOT") && !version.endsWith("DEVELOPMENT")
    }
    sign publishing.publications
}

nexusPublishing {
    // give nexus sonatype more time to initialize the staging repository
    clientTimeout = Duration.ofMinutes(3)
    useStaging = !rootProject.versionName.endsWith("SNAPSHOT")
    repositories {
        sonatype()
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifact sourcesJar

                groupId = 'com.braintreepayments.api'
                artifactId = 'paypal-data-collector'
                version = rootProject.versionName

                pom {
                    name = 'paypal-data-collector'
                    packaging = 'aar'
                    description = 'PayPal fraud tools for Braintree integrations on Android.'
                    url = 'https://github.com/braintree/braintree_android'

                    scm {
                        url = 'scm:git@github.com:braintree/braintree_android.git'
                        connection = 'scm:git@github.com:braintree/braintree_android.git'
                        developerConnection = 'scm:git@github.com:braintree/braintree_android.git'
                    }

                    developers {
                        developer {
                            id = 'devs'
                            name = 'Braintree Payments'
                        }
                    }

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'http://opensource.org/licenses/MIT'
                            distribution = 'repo'
                        }
                    }
                }
            }
        }
    }
}

// endregion
