plugins {
    id 'com.android.library'
    id 'de.marcphilipp.nexus-publish'
    id 'signing'
}

def DEVELOPMENT_URL = System.properties['DEVELOPMENT_URL'] ?: '"http://10.0.2.2:3000/"';

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion '30.0.3'

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName

        consumerProguardFiles 'proguard.pro'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        buildConfigField "String", "VERSION_NAME", "\"${rootProject.versionName}\""
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jvmArgs '-noverify'
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
    }
}

def playServicesWallet = "com.google.android.gms:play-services-wallet:${rootProject.playServicesWalletVersion}"

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.work:work-runtime:2.7.0-alpha05'

    implementation 'androidx.room:room-runtime:2.2.6'
    annotationProcessor 'androidx.room:room-compiler:2.2.6'

    api 'com.braintreepayments.api:browser-switch:2.1.1'
    api project(':SharedUtils')

    androidTestImplementation playServicesWallet
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.work:work-testing:2.5.0'
    androidTestImplementation project(':Card')
    androidTestImplementation project(':PayPal')
    androidTestImplementation project(':TestUtils')

    testImplementation 'androidx.work:work-testing:2.5.0'
    testImplementation 'org.robolectric:robolectric:4.1'
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation 'androidx.test.ext:junit:1.1.3'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.7'
    testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.7'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.7'
    testImplementation 'org.powermock:powermock-classloading-xstream:2.0.7'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
    testImplementation project(':PayPal')
    testImplementation project(':TestUtils')
    testImplementation project(':UnionPay')
    testImplementation project(':Venmo')
}

android.buildTypes.each { type ->
    type.buildConfigField 'String', 'DEVELOPMENT_URL', DEVELOPMENT_URL
}

task runAllTests {
    /*
     * Empty task to run via command line Rakefile or ci.sh to indicate that tests that depend on
     * setting up external services (like the test invalid https server) are set up correctly.
     * Otherwise, these tests will be skipped
     */
}

gradle.taskGraph.whenReady { taskGraph ->
    def RUN_ALL_TESTS = taskGraph.hasTask(':Braintree:runAllTests')
    android.buildTypes.debug.buildConfigField('boolean', 'RUN_ALL_TESTS', '' + RUN_ALL_TESTS)
}

// region signing and publishing

task javadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false

    // Used to exclude docstrings from public site
    exclude "com/braintreepayments/api/PreferredPaymentMethods.java"
    exclude "com/braintreepayments/api/models/PreferredPaymentMethodsResult.java"
    exclude "com/braintreepayments/api/interfaces/PreferredPaymentMethodsListener.java"
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    archiveClassifier.set('javadoc')
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

signing {
    required {
        !version.endsWith("SNAPSHOT") && !version.endsWith("DEVELOPMENT")
    }
    sign publishing.publications
}

nexusPublishing {
    // give nexus sonatype more time to initialize the staging repository
    clientTimeout = Duration.ofMinutes(3)
    repositories {
        sonatype()
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifact sourcesJar
                artifact javadocsJar

                groupId = 'com.braintreepayments.api'
                artifactId = 'braintree-core'
                version = rootProject.versionName

                pom {
                    name = 'braintree-core'
                    packaging = 'aar'
                    description = 'This is Braintree\'s Android SDK. Integrate this library to accept payments in your Android app.'
                    url = 'https://github.com/braintree/braintree_android'

                    scm {
                        url = 'scm:git@github.com:braintree/braintree_android.git'
                        connection = 'scm:git@github.com:braintree/braintree_android.git'
                        developerConnection = 'scm:git@github.com:braintree/braintree_android.git'
                    }

                    developers {
                        developer {
                            id = 'devs'
                            name = 'Braintree Payments'
                        }
                    }

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'http://opensource.org/licenses/MIT'
                            distribution = 'repo'
                        }
                    }
                }
            }
        }
    }
}

// endregion
