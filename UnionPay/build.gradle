plugins {
    id 'com.android.library'
    id 'de.marcphilipp.nexus-publish'
    id 'signing'
    id 'kotlin-android'
}
android {
    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            all {
                jvmArgs '-noverify'
            }
        }
    }
}

dependencies {
    api project(':BraintreeCore')
    api project(':Card')

    implementation 'androidx.annotation:annotation:1.1.0'

    testImplementation 'org.robolectric:robolectric:4.1'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.6'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.6'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.6'
    testImplementation 'org.powermock:powermock-classloading-xstream:1.6.6'
    testImplementation 'org.skyscreamer:jsonassert:1.4.0'
    testImplementation project(':TestUtils')
    testImplementation "androidx.core:core-ktx:+"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.5.10"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:1.5.10"

    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation project(':TestUtils')
}

// region signing and publishing

task javadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    archiveClassifier.set('javadoc')
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

signing {
    required {
        !version.endsWith("SNAPSHOT") && !version.endsWith("DEVELOPMENT")
    }
    sign publishing.publications
}

nexusPublishing {
    // give nexus sonatype more time to initialize the staging repository
    clientTimeout = Duration.ofMinutes(3)
    repositories {
        sonatype()
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifact sourcesJar
                artifact javadocsJar

                groupId = 'com.braintreepayments.api'
                artifactId = 'union-pay'
                version = rootProject.versionName

                pom {
                    name = 'union-pay'
                    packaging = 'aar'
                    description = 'Union Pay dependencies for Braintree Android.'
                    url = 'https://github.com/braintree/braintree_android'

                    scm {
                        url = 'scm:git@github.com:braintree/braintree_android.git'
                        connection = 'scm:git@github.com:braintree/braintree_android.git'
                        developerConnection = 'scm:git@github.com:braintree/braintree_android.git'
                    }

                    developers {
                        developer {
                            id = 'devs'
                            name = 'Braintree Payments'
                        }
                    }

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'http://opensource.org/licenses/MIT'
                            distribution = 'repo'
                        }
                    }
                }
            }
        }
    }
}
// endregion
