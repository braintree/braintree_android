buildscript {
    repositories {
        mavenCentral()
        google()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }

    def sdkTargetJavaVersion = JavaVersion.VERSION_11

    ext.versions = [
            "kotlin"         : "1.9.10",
            "androidxTest"   : "1.5.0",
            "room"           : "2.6.1",
            "playServices"   : "19.3.0",
            "javaSourceCompatibility": sdkTargetJavaVersion,
            "javaTargetCompatibility": sdkTargetJavaVersion,
    ]
    ext.deps = [
            "appCompat"                  : "androidx.appcompat:appcompat:1.6.0",
            "annotation"                 : "androidx.annotation:annotation:1.7.0",
            "coreKtx"                    : "androidx.core:core-ktx:1.12.0",

            "lifecycleRuntime"           : "androidx.lifecycle:lifecycle-runtime:2.6.2",

            "kotlinStdLib"               : "org.jetbrains.kotlin:kotlin-stdlib:1.9.20",
            "kotlinTest"                 : "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}",
            // This library doesn't seem to follow the versioning pattern of the other jetbrains
            // kotlin libraries. Make sure to keep this dependency in line with the kotlin version used.
            "kotlinCoroutinesCore"       : "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1",

            "browserSwitch"              : "com.braintreepayments.api:browser-switch:3.0.0-beta1",
            "cardinal"                   : "org.jfrog.cardinalcommerce.gradle:cardinalmobilesdk:2.2.7-5",
            "playServicesWallet"         : "com.google.android.gms:play-services-wallet:${versions.playServices}",

            "work"                       : "androidx.work:work-runtime:2.8.1",
            "workTesting"                : "androidx.work:work-testing:2.8.1",

            "roomCompiler"               : "androidx.room:room-compiler:${versions.room}",
            "roomRuntime"                : "androidx.room:room-runtime:${versions.room}",

            "androidxTestRules"          : "androidx.test:rules:${versions.androidxTest}",
            "androidxTestRunner"         : "androidx.test:runner:${versions.androidxTest}",
            "androidxTestCore"           : "androidx.test:core:${versions.androidxTest}",

            "junit"                      : "junit:junit:4.13.2",
            "junitTest"                  : "androidx.test.ext:junit:1.1.5",
            "robolectric"                : "org.robolectric:robolectric:4.11.1",
            "mockitoCore"                : "org.mockito:mockito-core:5.7.0",
            "jsonAssert"                 : "org.skyscreamer:jsonassert:1.5.1",
            "mockk"                      : "io.mockk:mockk:1.13.8",
    ]

    dependencies {
        classpath 'com.android.tools.build:gradle:8.1.4'
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.8.0"
        classpath 'androidx.navigation:navigation-safe-args-gradle-plugin:2.5.0'
        classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.9.10'
        classpath 'org.jetbrains.dokka:android-documentation-plugin:1.9.10'
    }
}

plugins {
    id 'org.jetbrains.dokka' version '1.9.10'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'io.gitlab.arturbosch.detekt' version '1.23.6'
}

ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID') ?: ''
ext["signing.password"] = System.getenv('SIGNING_KEY_PASSWORD') ?: ''
ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_KEY_FILE') ?: ''

allprojects {
    repositories {
        mavenCentral()
        google()
    }
}

version '5.0.0-beta2-SNAPSHOT'
group 'com.braintreepayments'
ext {
    compileSdkVersion = 34
    minSdkVersion = 23
    minSdkVersionPayPalMessaging = 23
    versionCode = 194
    targetSdkVersion = 34
    versionName = version
}

nexusPublishing {
    packageGroup = project.hasProperty('nexusPackageGroup') ? project.getProperty('nexusPackageGroup') : 'com.braintreepayments'

    repositories {
        sonatype {
            username = System.getenv('SONATYPE_NEXUS_USERNAME') ?: ''
            password = System.getenv('SONATYPE_NEXUS_PASSWORD') ?: ''
        }
    }

    transitionCheckOptions {
        // give nexus sonatype more time to close the staging repository
        delayBetween.set(Duration.ofSeconds(20))
    }
}

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:1.23.6"
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-rules-libraries:1.23.6"
}

detekt {
    toolVersion = "1.23.6"
    config = files("detekt/detekt-config.yml")
    input = files(
            "BraintreeCore/src",
            "AmericanExpress/src",
            "Card/src",
            "Demo/src",
            "GooglePay/src",
            "LocalPayment/src",
            "PayPal/src",
            "DataCollector/src",
            "PayPalMessaging/src",
            "SEPADirectDebit/src",
            "SharedUtils/src",
            "TestUtils/src",
            "ThreeDSecure/src",
            "Venmo/src",
            "ShopperInsights/src"
    )
    autoCorrect = project.hasProperty('detektAutoCorrect')
    reports {
        html {
            enabled = true
            destination = file("build/reports/detekt_report.html")
        }
    }
}

subprojects {
    repositories {
        maven {
            url "https://cardinalcommerceprod.jfrog.io/artifactory/android"
            credentials {
                username 'braintree_team_sdk'
                password 'cmVmdGtuOjAxOjIwMzgzMzI5Nzg6Q3U0eUx5Zzl5TDFnZXpQMXpESndSN2tBWHhJ'
            }
        }
        flatDir {
            dirs "${rootDir}/libs"
        }
    }
}

dokkaHtmlMultiModule.configure {
    // redirect dokka output to GitHub pages root directory
    outputDirectory.set(project.file("docs"))
}

task changeGradleReleaseVersion {
    doLast {
        def gradleFile = new File('build.gradle')
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion '" + versionParam + "'")
        gradleFile.write(gradleFileText)
    }
}

task changeREADMEVersion {
    doLast {

        def readmeFile = new File('README.md')
        def readmeFileText = readmeFile.text.replaceFirst(":card:\\d+\\.\\d+\\.\\d+(-.*)?'", ":card:" + versionParam + "'")
        readmeFile.write(readmeFileText)
    }
}

task changeMigrationGuideVersion {
    doLast {
        def migrationGuideFile = new File('v5_MIGRATION_GUIDE.md')
        def migrationGuideFileText = migrationGuideFile.text.replaceAll(":\\d+\\.\\d+\\.\\d+(-.*)?'", ":" + versionParam + "'")
        migrationGuideFile.write(migrationGuideFileText)
    }
}

task updateCHANGELOGVersion {
    doLast {
        def changelogFile = new File('CHANGELOG.md')
        def changelogFileText = changelogFile.text.replaceFirst("## unreleased", "## " + versionParam + " (" + new Date().format('yyyy-MM-dd') + ")")
        changelogFile.write(changelogFileText)
    }
}

task incrementSNAPSHOTVersion {
    doLast {
        def gradleFile = new File('build.gradle')
        def (major, minor, patch) = versionParam.tokenize('.')
        def patchInteger = patch[-1].toInteger()
        patchInteger++
        def newPatch = patch.substring(0,patch.length()-1) + patchInteger.toString()
        def newVersion = "$major.$minor.$newPatch-SNAPSHOT"
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion '" + newVersion + "'")
        gradleFile.write(gradleFileText)

        // update README snapshot version
        def readmeFile = new File('README.md')
        def readmeFileText = readmeFile.text.replaceFirst(":card:\\d+\\.\\d+\\.\\d+-SNAPSHOT'", ":card:" + newVersion + "'")
        readmeFile.write(readmeFileText)
    }
}

task incrementVersionCode {
    doLast {
        def gradleFile = new File('build.gradle')
        def versionText = gradleFile.text.find("versionCode = \\d+")
        def params = versionText.split("=")
        def newVersionCode = params[1].trim().toInteger() + 1
        def gradleFileText = gradleFile.text.replaceFirst("versionCode = \\d+", "versionCode = " + newVersionCode)
        gradleFile.write(gradleFileText)
    }
}
