plugins {
    id 'com.android.library'
    id 'de.marcphilipp.nexus-publish'
    id 'kotlin-android'
    id 'signing'
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion '30.0.3'

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode rootProject.versionCode
        versionName rootProject.versionName

        consumerProguardFiles 'proguard.pro'

        buildConfigField "String", "VERSION_NAME", "\"${rootProject.versionName}\""
    }

    lintOptions {
        abortOnError false
    }

    testOptions.unitTests {
        all {
            jvmArgs '-noverify'
        }
        returnDefaultValues true
        includeAndroidResources true
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    api "com.google.android.gms:play-services-wallet:${rootProject.playServicesWalletVersion}"

    api project(':BraintreeCore')
    api project(':PayPal')
    api project(':Card')

    testImplementation project(':TestUtils')
    testImplementation 'androidx.test:rules:1.4.0'
    testImplementation 'androidx.test:runner:1.4.0'
    testImplementation "com.google.android.gms:play-services-wallet:${rootProject.playServicesWalletVersion}"
    testImplementation 'com.squareup.assertj:assertj-android:1.1.1'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.9'
    testImplementation 'org.powermock:powermock-classloading-xstream:2.0.9'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.9'
    testImplementation 'org.powermock:powermock-module-junit4-rule:2.0.9'
    testImplementation 'org.robolectric:robolectric:4.3'
    testImplementation 'org.skyscreamer:jsonassert:1.4.0'
    testImplementation "androidx.core:core-ktx:1.3.2"
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

// region signing and publishing

task javadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    archiveClassifier.set('javadoc')
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

signing {
    required {
        !version.endsWith("SNAPSHOT") && !version.endsWith("DEVELOPMENT")
    }
    sign publishing.publications
}

nexusPublishing {
    // give nexus sonatype more time to initialize the staging repository
    clientTimeout = Duration.ofMinutes(3)
    repositories {
        sonatype()
    }
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release

                artifact sourcesJar
                artifact javadocsJar

                groupId = 'com.braintreepayments.api'
                artifactId = 'google-pay'
                version = rootProject.versionName

                pom {
                    name = 'google-pay'
                    packaging = 'aar'
                    description = 'Google Pay Module for Braintree\'s Android SDK.'
                    url = 'https://github.com/braintree/braintree_android'

                    scm {
                        url = 'scm:git@github.com:braintree/braintree_android.git'
                        connection = 'scm:git@github.com:braintree/braintree_android.git'
                        developerConnection = 'scm:git@github.com:braintree/braintree_android.git'
                    }

                    developers {
                        developer {
                            id = 'devs'
                            name = 'Braintree Payments'
                        }
                    }

                    licenses {
                        license {
                            name = 'MIT'
                            url = 'http://opensource.org/licenses/MIT'
                            distribution = 'repo'
                        }
                    }
                }
            }
        }
    }
}

// endregion
